# -*- coding: utf-8 -*-
"""audio_DFT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A1qgJaV3DxAJ5FK5uC4cpn0i1s1VoHd3

# Step 1: Install Required Libraries
Make sure to install the required libraries.
"""

!pip install librosa numpy matplotlib

"""# Step 2: Import Required Libraries
Import the necessary libraries.
"""

import librosa
import numpy as np
import os
import matplotlib.pyplot as plt
import librosa.display

"""# Step 3: Define the Audio Preprocessing Function
This function loads the audio file, trims silent edges, and normalizes the audio.
"""

def preprocess_audio(file_path, target_sample_rate=16000):
    # Load audio file
    audio, sample_rate = librosa.load(file_path, sr=target_sample_rate, mono=True)

    # Trim silent edges
    audio, _ = librosa.effects.trim(audio)

    # Normalize the audio
    audio = librosa.util.normalize(audio)

    return audio, sample_rate

"""# Step 4: Define DFT Calculation Function
This function computes the DFT of the audio signal and returns the magnitude.
"""

def compute_dft(audio):
    # Apply FFT to get the complex DFT
    dft = np.fft.fft(audio)
    # Compute the magnitude
    dft_magnitude = np.abs(dft)

    return dft_magnitude

"""# Step 5: Define Functions for Feature Extraction
Here we define functions to extract various audio features.
"""

def extract_features(audio, sample_rate):
    # Extract Mel-spectrogram
    mel_spectrogram = librosa.feature.melspectrogram(y=audio, sr=sample_rate, n_mels=128)
    log_mel_spectrogram = librosa.power_to_db(mel_spectrogram, ref=np.max)

    # Extract MFCCs
    mfccs = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=13)
    mfccs_db = librosa.power_to_db(mfccs, ref=np.max)

    # Extract Chroma features
    chroma_features = librosa.feature.chroma_stft(y=audio, sr=sample_rate)
    chroma_db = librosa.power_to_db(chroma_features, ref=np.max)

    # Extract Spectral Contrast
    spectral_contrast = librosa.feature.spectral_contrast(y=audio, sr=sample_rate)

    # Extract Zero Crossing Rate
    zero_crossing_rate = librosa.feature.zero_crossing_rate(y=audio)

    return log_mel_spectrogram, mfccs_db, chroma_db, spectral_contrast, zero_crossing_rate

"""# Step 6: Define Plotting Functions
Define functions for plotting each feature.
"""

def plot_mel_spectrogram(mel_spectrogram_db, file_name):
    plt.figure(figsize=(10, 4))
    librosa.display.specshow(mel_spectrogram_db, x_axis='time', y_axis='mel', sr=16000, cmap='coolwarm')
    plt.colorbar(format='%+2.0f dB')
    plt.title(f'Mel-Spectrogram - {file_name}')
    plt.tight_layout()
    plt.show()

def plot_mfccs(mfccs_db, file_name):
    plt.figure(figsize=(10, 4))
    librosa.display.specshow(mfccs_db, x_axis='time', sr=16000, cmap='coolwarm')
    plt.colorbar(format='%+2.0f dB')
    plt.title(f'MFCCs - {file_name}')
    plt.tight_layout()
    plt.show()

def plot_chroma(chroma_db, file_name):
    plt.figure(figsize=(10, 4))
    librosa.display.specshow(chroma_db, x_axis='time', y_axis='chroma', cmap='coolwarm', sr=16000)
    plt.colorbar(format='%+2.0f dB')
    plt.title(f'Chroma Features - {file_name}')
    plt.tight_layout()
    plt.show()

def plot_spectral_contrast(spectral_contrast, file_name, sample_rate):
    plt.figure(figsize=(10, 4))
    librosa.display.specshow(spectral_contrast, x_axis='time', sr=sample_rate, cmap='coolwarm')
    plt.colorbar(label='Spectral Contrast (dB)')
    plt.ylabel('Frequency Bands')
    plt.title(f'Spectral Contrast - {file_name}')
    plt.tight_layout()
    plt.show()

def plot_zero_crossing_rate(zcr, file_name, sample_rate):
    plt.figure(figsize=(10, 4))
    plt.plot(librosa.times_like(zcr[0], sr=sample_rate), zcr[0], label='ZCR')
    plt.xlabel('Time (s)')
    plt.ylabel('Zero Crossing Rate')
    plt.title(f'Zero Crossing Rate - {file_name}')
    plt.tight_layout()
    plt.show()

def plot_dft(dft_magnitude, file_name):
    plt.figure(figsize=(10, 4))
    plt.plot(dft_magnitude)
    plt.title(f'DFT Magnitude - {file_name}')
    plt.xlabel('Frequency (bins)')
    plt.ylabel('Magnitude')
    plt.xlim(0, len(dft_magnitude)//2)  # Show only positive frequencies
    plt.grid()
    plt.tight_layout()
    plt.show()

"""# Step 7: Process the Audio Files and Generate Plots
Finally, we process the audio files, extract features, and plot them.
"""

# Define the path to the folder containing your audio files
audio_folder = '/content/drive/MyDrive/ap'  # Your folder path

# List all .wav files recursively
audio_files = []
for root, dirs, files in os.walk(audio_folder):
    for file in files:
        if file.lower().endswith('.wav'):
            audio_files.append(os.path.join(root, file))

# Preprocess each audio file, extract features, and plot them
for audio_file in audio_files:
    audio, sample_rate = preprocess_audio(audio_file)

    # Compute DFT and plot it
    dft_magnitude = compute_dft(audio)
    plot_dft(dft_magnitude, os.path.basename(audio_file))

    # Extract features
    mel_spectrogram, mfccs_db, chroma_db, spectral_contrast, zero_crossing_rate = extract_features(audio, sample_rate)

    # Plot features
    plot_mel_spectrogram(mel_spectrogram, os.path.basename(audio_file))
    plot_mfccs(mfccs_db, os.path.basename(audio_file))
    plot_chroma(chroma_db, os.path.basename(audio_file))
    plot_spectral_contrast(spectral_contrast, os.path.basename(audio_file), sample_rate)
    plot_zero_crossing_rate(zero_crossing_rate, os.path.basename(audio_file), sample_rate)

